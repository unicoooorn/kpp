// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	model "github.com/unicoooorn/kpp/internal/model"
)

// ContainerManager is an autogenerated mock type for the ContainerManager type
type ContainerManager struct {
	mock.Mock
}

// ContainersStats provides a mock function with given fields: _a0
func (_m *ContainerManager) ContainersStats(_a0 context.Context) (map[string]model.Stat, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ContainersStats")
	}

	var r0 map[string]model.Stat
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (map[string]model.Stat, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) map[string]model.Stat); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]model.Stat)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Kill provides a mock function with given fields: _a0, _a1
func (_m *ContainerManager) Kill(_a0 context.Context, _a1 string) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Kill")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewContainerManager creates a new instance of ContainerManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewContainerManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *ContainerManager {
	mock := &ContainerManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
